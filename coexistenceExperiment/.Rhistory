(x/sum(x))^q))^(1/(1-q))))) }
set.seed(42)
C3 <- data.frame(t(sample(1:1000, 500))); colnames(C3) = paste("sp",1:500)
C3_profile <- profile(C3)
plot(C3_profile[,1],C3_profile[,2],ylim=c(300,500),pch=16,cex=2,
xlab="q exponent", ylab = "Diversity (ENS)")
set.seed(42)
C3 <- data.frame(t(sample(1:1000, 500))); colnames(C3) = paste("sp",1:500)
C3_profile <- profile(C3)
plot(C3_profile[,1],C3_profile[,2],ylim=c(300,500),pch=16,cex=2,
xlab="q exponent", ylab = "Diversity (ENS)")
# The following function `profile` calculates the diversity from the equation above along
# a continuum of q values
profile <- function(C) {
cbind(seq(0, 7, by = 0.11),
unlist(lapply(seq(0, 7, by = 0.11),function(q) sum(apply(C, 1, function(x)
(x/sum(x))^q))^(1/(1-q))))) }
set.seed(42)
C3 <- data.frame(t(sample(1:1000, 500))); colnames(C3) = paste("sp",1:500)
C3_profile <- profile(C3)
plot(C3_profile[,1],C3_profile[,2],ylim=c(300,500),pch=16,cex=2,
xlab="q exponent", ylab = "Diversity (ENS)")
set.seed(42)
C3 <- data.frame(t(sample(1:1000, 500))); colnames(C3) = paste("sp",1:500)
C3_profile <- profile(C3)
plot(C3_profile[,1], C3_profile[,2], ylim=c(300,500), pch = 12, cex = 2,
xlab = "q exponent", ylab = "Diversity (ENS)")
set.seed(42)
C3 <- data.frame(t(sample(1:1000, 500))); colnames(C3) = paste("sp",1:500)
C3_profile <- profile(C3)
plot(C3_profile[,1], C3_profile[,2], ylim=c(300,500), pch = 16, cex = 1,
xlab = "q exponent", ylab = "Diversity (ENS)")
rm(list = ls())
getwd()
setwd("~/GitHub/QB-2023/1.HandOuts/5.AlphaDiversity")
#install.packages("vegan")
require("vegan")
data(BCI)
S.obs <- function(x = ""){
rowSums(x > 0) * 1
}
C <- function(x = ""){
1 - (rowSums(x == 1) / rowSums(x))
}
soilbac <- read.table("data/soilbac.txt", sep = "\t", header = TRUE, row.names = 1)
soilbac.t <- as.data.frame(t(soilbac))
soilbac1 <- soilbac.t[1,]
S.chao1 <- function(x = ""){
S.obs(x) + (sum(x == 1)^2) / (2 * sum(x == 2))
}
S.chao2 <- function(site = "", SbyS = ""){
SbyS = as.data.frame(SbyS)
x = SbyS[site, ]
SbyS.pa <- (SbyS > 0) * 1 # convert the SbyS to presence/absence
Q1 = sum(colSums(SbyS.pa) == 1) # species observed once
Q2 = sum(colSums(SbyS.pa) == 2) # species observed twice
S.chao2 = S.obs(x) + (Q1^2)/(2 * Q2)
return(S.chao2)
}
S.ace <- function(x = "", thresh = 10){
x <- x[x>0]                           # excludes zero-abundance taxa
S.abund <- length(which(x > thresh))  # richness of abundant taxa
S.rare  <- length(which(x <= thresh)) # richness of rare taxa
singlt  <- length(which(x == 1))      # number of singleton taxa
N.rare  <- sum(x[which(x <= thresh)]) # abundance of rare individuals
C.ace   <- 1 - (singlt / N.rare)      # coverage (prop non-singlt rare inds)
i       <- c(1:thresh)                # threshold abundance range
count   <- function(i, y){            # counter to go through i range
length(y[y == i])
}
a.1     <- sapply(i, count, x)        # number of individuals in richness i richness classes
f.1     <- (i * (i - 1)) * a.1        # k(k-1)kf sensu Gotelli
G.ace   <- (S.rare/C.ace)*(sum(f.1)/(N.rare*(N.rare-1)))
S.ace   <- S.abund + (S.rare/C.ace) + (singlt/C.ace) * max(G.ace,0)
return(S.ace)
}
soilbac.S <- S.obs(soilbac.t)
min.N <- min(rowSums(soilbac.t))
S.rarefy <- rarefy(x = soilbac.t, sample = min.N, se = TRUE)
rarecurve(x = soilbac.t, step = 20, col = "blue", cex = 0.6, las = 1)
abline(0, 1, col = 'red')
text(1500, 1500, "1:1", pos = 2, col = 'red')
RAC <- function(x = ""){
x = as.vector(x)
x.ab = x[x > 0]
x.ab.ranked = x.ab[order(x.ab, decreasing = TRUE)]
return(x.ab.ranked)
}
plot.new()
site1 <- BCI[1, ]
rac <- RAC(x = site1)
rac <- RAC(x = site1)
??RAC
site1
class(site1)
RACresults
RACresults <- radfit(site1)
RACresults
site1 <- BCI[1, ]
SimpE(site1)
RAC <- function(x = ""){
x = as.vector(x)
x.ab = x[x > 0]
x.ab.ranked = x.ab[order(x.ab, decreasing = TRUE)]
return(x.ab.ranked)
}
rac <- RAC(x = site1)
RAC <- function(x){
x = as.vector(x)
x.ab = x[x > 0]
x.ab.ranked = x.ab[order(x.ab, decreasing = TRUE)]
return(x.ab.ranked)
}
rac <- RAC(x = site1)
RAC <- function(x = ""){
x.ab = x[x > 0]
x.ab.ranked = x.ab[order(x.ab, decreasing = TRUE)]
as.data.frame(lapply(x.ab.ranked, unlist))
return(x.ab.ranked)
}
plot.new()
site1 <- BCI[1, ]
rac <- RAC(x = site1)
ranks <- as.vector(seq(1, length(rac)))
opar <- par(no.readonly = TRUE)                       # Saves default plot parameters
par(mar = c(5.1, 5.1, 4.1, 2.1))                      # New settings for par
plot(ranks, log(rac), type = 'p', axes = F,           # Plots w/o axes
xlab = "Rank in abundance", ylab = "Abundance",
las = 1, cex.lab = 1.4, cex.axis = 1.25)
box()                                                 # Manually adds border
axis(side = 1, labels = T, cex.axis = 1.25)           # Manually adds X-axis
axis(side = 2, las = 1, cex.axis = 1.25,              # Manually adds Log-Scaled Y-axis
labels = c(1, 2, 5, 10, 20), at = log(c(1, 2, 5, 10, 20)))
par <- opar                                           # Resets plotting parameters
rac
library(phylogram)
library(dendextend)
library(cluster)
library(phytools)
library(pander)
library(phangorn)
library(pmc)
library(phylolm)
R --version
library(caper)
library(caper)
library(RColorBrewer)
library(stats)
library(picante)
library(adephylo)
library(phylobase)
library(seqinr)
library(ape)
library(geiger)
setwd("~/")
setwd("~/Library/CloudStorage/OneDrive-IndianaUniversity/DormanyMutualism/coexistenceExperiment")
library(tidyverse)
setwd("~/Library/CloudStorage/OneDrive-IndianaUniversity/DormanyMutualism/coexistenceExperiment")
read.table("count_data.csv", sep = ",", dec = ".", header = T)
count <- read.table("count_data.csv", sep = ",", dec = ".", header = T)
design <- read.table("design.csv", sep = ",", dec = ".", header = T)
# plot theme
mytheme<- theme_bw()+
theme(axis.text = element_text(size=18),
axis.title = element_text(size=18,face="bold"),
legend.text = element_text(size=14),
legend.background = element_blank(),
legend.title = element_text(size=14,face="bold"),
plot.title = element_text(size=18, face="bold", hjust=0.5),
strip.text = element_text(size=14, face="bold"),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
View(design)
View(count)
count_cleaned <- count %>%
mutate(dilutionFactor = (10^dil.)*1000/vol.) %>%
rowwise() %>%
mutate(Lys = mean(c(lys1, lys2, lys3), na.rm =T)) %>%
mutate(Trp = mean(c(trp1, trp2, trp3), na.rm =T))
count_cleaned <- count %>%
mutate(dilutionFactor = (10^dilution)*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(lys1, lys2, lys3), na.rm =T)) %>%
mutate(Trp = mean(c(trp1, trp2, trp3), na.rm =T)) %>%
mutate(across(c(Lys, Trp), ~ replace(., is.nan(.), 0)))
# clean data
count_cleaned <- count %>%
mutate(dilutionFactor = (10^dilution)*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(lys_r1, lys_r2, lys_r3), na.rm =T)) %>%
mutate(Trp = mean(c(trp_r1, trp_r2, trp_r3), na.rm =T))
# clean data
count_cleaned <- count %>%
mutate(dilutionFactor = (10^dilution)*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(Trp = mean(c(as.numeric(trp_r1), as.numeric(trp_r2), as.numeric(trp_r3)), na.rm =T))
# clean data
count_cleaned <- count %>%
mutate(dilutionFactor = (10^dilution)*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T))
View(count_cleaned)
# clean data
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0)))
# clean data
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer, well, ID, Lys, His)
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer, Well, ID, Lys, His)
# clean data
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer, well, Lys, His)
count  <- read.table("count_data.csv", sep = ",", dec = ".", header = T)
design <- read.table("design.csv", sep = ",", dec = ".", header = T)
# clean data
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0)))
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer, well, Lys, His) %>%
pivot_longer(cols = Lys:His, names_to = 'strain', values_to = "count")
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer, well, Lys, His) %>%
pivot_longer(cols = Lys:His, names_to = 'strain', values_to = "count") %>%
mutate(count_mL = count*dilutionFactor)
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer, well, Lys, His) %>%
pivot_longer(cols = Lys:His, names_to = 'strain', values_to = "count") %>%
mutate(count_mL = count*dilutionFactor) %>%
group_by(transfer, well) %>%
summarise(cfu_mL = mean(count_mL, na.rm = T))
count_cleaned
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer, well, Lys, His) %>%
pivot_longer(cols = Lys:His, names_to = 'strain', values_to = "count") %>%
mutate(count_mL = count*dilutionFactor) %>%
group_by(transfer, well, strain) %>%
summarise(cfu_mL = mean(count_mL, na.rm = T))
count_cleaned
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer,dilutionFactor, well, Lys, His) %>%
pivot_longer(cols = Lys:His, names_to = 'strain', values_to = "count") %>%
mutate(count_mL = count*dilutionFactor) %>%
group_by(transfer, well, strain) %>%
summarise(cfu_mL = mean(count_mL, na.rm = T))
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer,dilutionFactor, well, Lys, His) %>%
pivot_longer(cols = Lys:His, names_to = 'strain', values_to = "count") %>%
mutate(count_mL = count*dilutionFactor) %>%
group_by(transfer, well, strain) %>%
summarise(cfu_mL = mean(count_mL, na.rm = T)) %>%
left_join(design, by = "well")
# clean data
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer,dilutionFactor, well, Lys, His) %>%
pivot_longer(cols = Lys:His, names_to = 'strain', values_to = "count") %>%
mutate(count_mL = count*dilutionFactor) %>%
group_by(transfer, well, strain) %>%
summarise(cfu_mL = mean(count_mL, na.rm = T)) %>%
full_join(design, by = "well")
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer,dilutionFactor, well, Lys, His) %>%
pivot_longer(cols = Lys:His, names_to = 'strain', values_to = "count") %>%
mutate(count_mL = count*dilutionFactor) %>%
group_by(transfer, well, strain) %>%
summarise(cfu_mL = mean(count_mL, na.rm = T)) %>%
right_join(design, by = "well")
design <- read.table("design.csv", sep = ",", dec = ".", header = T)
# clean data
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer,dilutionFactor, well, Lys, His) %>%
pivot_longer(cols = Lys:His, names_to = 'strain', values_to = "count") %>%
mutate(count_mL = count*dilutionFactor) %>%
group_by(transfer, well, strain) %>%
summarise(cfu_mL = mean(count_mL, na.rm = T)) %>%
left_join(design, by = "well")
count  <- read.table("count_data.csv", sep = ",", dec = ".", header = T)
design <- read.table("design.csv", sep = ",", dec = ".", header = T)
# plot theme
mytheme<- theme_bw()+
theme(axis.text = element_text(size=18),
axis.title = element_text(size=18,face="bold"),
legend.text = element_text(size=14),
legend.background = element_blank(),
legend.title = element_text(size=14,face="bold"),
plot.title = element_text(size=18, face="bold", hjust=0.5),
strip.text = element_text(size=14, face="bold"),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# clean data
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer,dilutionFactor, well, Lys, His) %>%
pivot_longer(cols = Lys:His, names_to = 'strain', values_to = "count") %>%
mutate(count_mL = count*dilutionFactor) %>%
group_by(transfer, well, strain) %>%
summarise(cfu_mL = mean(count_mL, na.rm = T)) %>%
left_join(design, by = "well")
# plot data
ggplot(totalData_cleaned, aes(x = time, y = log10(cfu_mL), color = strain))+
geom_point()+
geom_smooth(alpha=0.1)+
facet_grid(.~sample)+
theme_bw()+
mytheme+
scale_color_npg()
count  <- read.table("count_data.csv", sep = ",", dec = ".", header = T)
design <- read.table("design.csv", sep = ",", dec = ".", header = T)
# clean data
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer,dilutionFactor, well, Lys, His) %>%
pivot_longer(cols = Lys:His, names_to = 'strain', values_to = "count") %>%
mutate(count_mL = count*dilutionFactor) %>%
group_by(transfer, well, strain) %>%
summarise(cfu_mL = mean(count_mL, na.rm = T)) %>%
left_join(design, by = "well")
count  <- read.table("count_data.csv", sep = ",", dec = ".", header = T)
design <- read.table("design.csv", sep = ",", dec = ".", header = T)
# plot theme
mytheme<- theme_bw()+
theme(axis.text = element_text(size=18),
axis.title = element_text(size=18,face="bold"),
legend.text = element_text(size=14),
legend.background = element_blank(),
legend.title = element_text(size=14,face="bold"),
plot.title = element_text(size=18, face="bold", hjust=0.5),
strip.text = element_text(size=14, face="bold"),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# clean data
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer,dilutionFactor, well, Lys, His) %>%
pivot_longer(cols = Lys:His, names_to = 'strain', values_to = "count") %>%
mutate(count_mL = count*dilutionFactor) %>%
group_by(transfer, well, strain) %>%
summarise(cfu_mL = mean(count_mL, na.rm = T)) %>%
left_join(design, by = "well")
# plot data
ggplot(totalData_cleaned, aes(x = time, y = log10(cfu_mL), color = strain))+
geom_point()+
geom_smooth(alpha=0.1)+
facet_grid(.~sample)+
theme_bw()+
mytheme+
scale_color_npg()
count  <- read.table("count_data.csv", sep = ",", dec = ".", header = T)
design <- read.table("design.csv", sep = ",", dec = ".", header = T)
# plot theme
mytheme<- theme_bw()+
theme(axis.text = element_text(size=18),
axis.title = element_text(size=18,face="bold"),
legend.text = element_text(size=14),
legend.background = element_blank(),
legend.title = element_text(size=14,face="bold"),
plot.title = element_text(size=18, face="bold", hjust=0.5),
strip.text = element_text(size=14, face="bold"),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# clean data
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer,dilutionFactor, well, Lys, His) %>%
pivot_longer(cols = Lys:His, names_to = 'strain', values_to = "count") %>%
mutate(count_mL = count*dilutionFactor) %>%
group_by(transfer, well, strain) %>%
summarise(cfu_mL = mean(count_mL, na.rm = T)) %>%
left_join(design, by = "well")
count  <- read.table("count_data.csv", sep = ",", dec = ".", header = T)
design <- read.table("design.csv", sep = ",", dec = ".", header = T)
# clean data
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer,dilutionFactor, well, Lys, His) %>%
pivot_longer(cols = Lys:His, names_to = 'strain', values_to = "count") %>%
mutate(count_mL = count*dilutionFactor) %>%
group_by(transfer, well, strain) %>%
summarise(cfu_mL = mean(count_mL, na.rm = T)) %>%
left_join(design, by = "well")
# plot data
ggplot(count_cleaned, aes(x = transfer, y = log10(cfu_mL), color = strain))+
geom_point()+
geom_smooth(alpha=0.1)+
facet_grid(.~combination)+
theme_bw()+
mytheme+
scale_color_npg()
library(ggsci)
# clean data
count_cleaned <- count %>%
mutate(dilutionFactor = dilution*1000/volume_ul) %>%
rowwise() %>%
mutate(Lys = mean(c(as.numeric(lys_r1), as.numeric(lys_r2), as.numeric(lys_r3)), na.rm =T)) %>%
mutate(His = mean(c(as.numeric(his_r1), as.numeric(his_r2), as.numeric(his_r3)), na.rm =T)) %>%
mutate(across(c(Lys, His), ~ replace(., is.nan(.), 0))) %>%
select(transfer,dilutionFactor, well, Lys, His) %>%
pivot_longer(cols = Lys:His, names_to = 'strain', values_to = "count") %>%
mutate(count_mL = count*dilutionFactor) %>%
group_by(transfer, well, strain) %>%
summarise(cfu_mL = mean(count_mL, na.rm = T)) %>%
left_join(design, by = "well")
# plot data
ggplot(count_cleaned, aes(x = transfer, y = log10(cfu_mL), color = strain))+
geom_point()+
geom_smooth(alpha=0.1)+
facet_grid(.~combination)+
theme_bw()+
mytheme+
scale_color_npg()
# plot data
ggplot(count_cleaned, aes(x = transfer, y = log10(cfu_mL), color = strain))+
geom_point()+
geom_smooth(alpha=0.1)+
facet_wrap(~combination)+
theme_bw()+
mytheme+
scale_color_npg()
